@page "/Houses"
@using global::Shared.Models
@using System.Diagnostics
@inject HttpClient Http
@inject IAccessTokenProvider AccessTokenProvider
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@attribute [Authorize]

@* <p>@_token</p> *@

<div class="row">
    @if(!(_houses is null))
    {
        foreach (var house in _houses)
        {
            <div class="card" style="width: 16rem; margin: 1rem">
                <h3 class="card-header" style="text-align: center"> @house.Name </h3>
                <div class="card-body" style="margin: auto">
                    <a class="btn btn-dark" href="Rooms" @onclick="@(() => SetHouseId(house.Id))"> Manage house </a>
                </div>
            </div>
        }
    }
</div>
<div class="input-group">
    <input class="form-control" placeholder="House name" @bind="_newHouseName" aria-describedby="add-house-addon"/>
    <div class="input-group-append">
        <button class="btn btn-info" id="add-house-addon" @onclick="AddHouse"> Add house </button>
    </div>
</div>

@inject IJSRuntime JsRuntime;

@code {
    // private string _token;
    private IList<House> _houses;
    private string _newHouseName;

    protected override async Task OnInitializedAsync()
    {
        _houses = await Http.GetFromJsonAsync<IList<House>>("houses");
    }
    
    private async void AddHouse()
    {
        if (string.IsNullOrWhiteSpace(_newHouseName))
        {
            return;
        }
        
        HttpResponseMessage response = await Http.PostAsJsonAsync("houses", new House()
        {
            Name = _newHouseName
        });
        House newHouse = await response.Content.ReadFromJsonAsync<House>();
        _houses.Add(newHouse);

        if (newHouse != null) ManagerId.HouseId = newHouse.Id;
        await JsRuntime.InvokeVoidAsync("alert", ManagerId.HouseId);

        _newHouseName = string.Empty;
        StateHasChanged();
    }

    private async void SetHouseId(int houseId)
    {
        ManagerId.HouseId = houseId;
        Debug.WriteLine(ManagerId.HouseId);
        await JsRuntime.InvokeVoidAsync("alert", ManagerId.HouseId);
    }

}