@page "/Houses"
@using global::Shared.Models
@using global::Shared
@inject IdService IdService
@inject HttpClient Http
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavManager
@attribute [Authorize]

<div class="input-group">
    <input class="form-control" placeholder="House name" @bind="_newHouseName" aria-describedby="add-house-addon"
           style="margin: 1rem"/>
    <div class="input-group-append">
        <button class="btn btn-info" id="add-house-addon" @onclick="AddHouse" style="margin: 1rem"> Add house </button>
    </div>
</div>
<div class="row">
    @if (!(_houses is null))
    {
        foreach (var house in _houses)
        {
            <div class="card" style="width: 16rem; margin: 1rem">
                <h3 class="card-header" style="text-align: center"> @house.Name </h3>
                <div class="card-body" style="margin: auto">
                    <div class="btn-group">
                        <button class="btn btn-dark" @onclick="@(() => SetHouseId(house.Id))"> Manage house </button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteHouse(house.Id))"> Delete house </button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private IList<House> _houses;
    private string _newHouseName;

    protected override async Task OnInitializedAsync()
    {
        _houses = await Http.GetFromJsonAsync<IList<House>>("houses");
    }

    private async void AddHouse()
    {
        if (string.IsNullOrWhiteSpace(_newHouseName))
        {
            return;
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync("houses", new House()
        {
            Name = _newHouseName
        });
        House newHouse = await response.Content.ReadFromJsonAsync<House>();
        _houses.Add(newHouse);

        _newHouseName = string.Empty;
        StateHasChanged();
    }

    private async void DeleteHouse(Guid id)
    {
        await Http.DeleteAsync($"houses/{id}");
        _houses.Remove(_houses.SingleOrDefault(house => house.Id == id));
        StateHasChanged();
    }

    private async Task SetHouseId(Guid id)
    {
        await IdService.SetHouseId(id);
        NavManager.NavigateTo("Rooms");
    }

}