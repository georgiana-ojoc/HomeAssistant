@page "/checkout"
@using Stripe.Checkout
@using Stripe
@using System.Configuration
@inject IJSRuntime jsRuntime
<h3>Checkout</h3>
<div class="card" style="width: 18rem;display: inline-block">
    <div class="card-body" style="display: flex;
                                     flex-direction: column;
                                     justify-content: center;
                                     align-items: center;">
        <h5 class="card-title">Basic</h5>
        <p class="card-text">5 of everything.</p>
        <button class="btn btn-primary mx-3" @onclick="@(e => CheckoutHandler("Basic"))">Buy Here</button>
    </div>
</div>
<div class="card" style="width: 18rem;display: inline-block">
    <div class="card-body" style="display: flex;
                                     flex-direction: column;
                                     justify-content: center;
                                     align-items: center;">
        <h5 class="card-title">Premium</h5>
        <p class="card-text">20 of everything.</p>
        <button class="btn btn-primary mx-3" @onclick="@(e => CheckoutHandler("Premium"))">Buy Here</button>
    </div>
</div>
<div class="card" style="width: 18rem;display: inline-block">
    <div class="card-body" style="display: flex;
                                     flex-direction: column;
                                     justify-content: center;
                                     align-items: center;">
        <h5 class="card-title">Business</h5>
        <p class="card-text">100 of everything.</p>
        <button class="btn btn-primary mx-3" @onclick="@(e => CheckoutHandler("Business"))">Buy Here</button>
    </div>
</div>

@code {

    private async Task CheckoutHandler(string priceId)
    {
        string sessionId = await CreateCheckoutSessionAsync(priceId);
        await jsRuntime.InvokeVoidAsync("redirectToCheckout", sessionId);
    }

    public static async Task<string> CreateCheckoutSessionAsync(string priceId, string customerId = null)
    {
        Dictionary<string, string> metadata = new Dictionary<string, string>();
        String email = "silviuilas@gmail.com";
        metadata["email"] = email;
        var paymentIntentData = new SessionPaymentIntentDataOptions();
        paymentIntentData.Metadata = new Dictionary<string, string>
        {
            {"email", email},
        };
        var options = new SessionCreateOptions
        {
            PaymentIntentData = paymentIntentData,
            Customer = customerId,
            CustomerEmail = email,
            PaymentMethodTypes = new List<string>
            {
                "card",
            },
            Mode = "payment",
            SuccessUrl = $"https://localhost:6001/success?session_id={{CHECKOUT_SESSION_ID}}",
            CancelUrl = $"https://localhost:6001/checkout",
        };

        switch (priceId)
        {
            case "Basic":
                options.LineItems = new List<SessionLineItemOptions>
                {
                    new SessionLineItemOptions
                    {
                        Name = "Basic",
                        Description = "5 of everything",
                        Amount = 500,
                        Currency = "ron",
                        Quantity = 1,
                    },
                };
                break;
            case "Premium":
                options.LineItems = new List<SessionLineItemOptions>
                {
                    new SessionLineItemOptions
                    {
                        Name = "Premium",
                        Description = "20 of everything",
                        Amount = 2000,
                        Currency = "ron",
                        Quantity = 1,
                    },
                };
                break;
            case "Business":
                options.LineItems = new List<SessionLineItemOptions>
                {
                    new SessionLineItemOptions
                    {
                        Name = "Premium",
                        Description = "100 of everything",
                        Amount = 10000,
                        Currency = "ron",
                        Quantity = 1,
                    },
                };
                break;
        }

        return (await new SessionService().CreateAsync(options)).Id;
    }

}