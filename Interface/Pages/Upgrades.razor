@page "/checkout"
@using global::Shared.Models
@using System.Security.Claims
@using Stripe.Checkout
@inject AuthenticationStateProvider _authenticationStateProvider
@inject HttpClient _http
@inject IJSRuntime _jsRuntime
<h3>Checkout</h3>
<div style="display: flex;flex-wrap: wrap;justify-content: space-evenly;">
    @if (_checkoutOffers != null)
    {
        @foreach (var checkoutPriceKey in _checkoutOffers)
        {
            <div class="card" style="width: 18rem;display: inline-block; margin: 10px">
                <div class="card-body" style="display: flex;
                                         flex-direction: column;
                                         justify-content: center;
                                         align-items: center;">
                    <h5 class="card-title">@checkoutPriceKey.Name</h5>
                    <p class="card-text">@checkoutPriceKey.Description</p>
                    @foreach (KeyValuePair<string, string> checkoutDetailsPair in checkoutPriceKey.GetFields())
                    {
                        <p class="card-text" style="margin:5px">
                            @checkoutDetailsPair.Key <b>@checkoutDetailsPair.Value</b>
                        </p>
                    }
                    <button class="btn btn-primary mx-3" @onclick="@(_ => CheckoutHandler(checkoutPriceKey.Id, checkoutPriceKey.Name, checkoutPriceKey.Description, checkoutPriceKey.Price))">Buy Here for @(checkoutPriceKey.Price / 100)$</button>
                </div>
            </div>
        }
    }
    else
    {
        <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    }
</div>

@code {

    private async Task CheckoutHandler(Guid id, string name, string description, long amount)
    {
        string sessionId = await CreateCheckoutSessionAsync(id, name, description, amount);
        await _jsRuntime.InvokeVoidAsync("redirectToCheckout", sessionId);
    }

    private async Task<string> CreateCheckoutSessionAsync(Guid id, string name, string description, long amount, string customerId = null)
    {
        AuthenticationState authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authenticationState.User;
        string email = user.FindFirst("emails")?.Value;
        email = email?.Substring(2, email.Length - 4);
        var paymentIntentData = new SessionPaymentIntentDataOptions
        {
            Metadata = new Dictionary<string, string>
            {
                {"email", email},
                {"id", id.ToString()}
            }
        };
        var options = new SessionCreateOptions
        {
            PaymentIntentData = paymentIntentData,
            Customer = customerId,
            CustomerEmail = email,
            PaymentMethodTypes = new List<string>
            {
                "card",
            },
            Mode = "payment",
            SuccessUrl = "https://localhost:6001/success?session_id={CHECKOUT_SESSION_ID}",
            CancelUrl = "https://localhost:6001/checkout",
            LineItems = new List<SessionLineItemOptions>
            {
                new()
                {
                    Name = name,
                    Description = description,
                    Amount = amount,
                    Currency = "usd",
                    Quantity = 1,
                },
            },
        };

        return (await new SessionService().CreateAsync(options)).Id;
    }

}

@code {
    IList<Subscription> _checkoutOffers;

    protected override async Task OnInitializedAsync()
    {
        _checkoutOffers = await _http.GetFromJsonAsync<IList<Subscription>>("subscriptions");
    }

}