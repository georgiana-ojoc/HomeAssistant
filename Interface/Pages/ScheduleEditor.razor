@page "/ScheduleEditor"
@using Interface.Scripts
@inject IdService _idService
@inject HttpClient _http
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div>
    <h1>
        Manage commands in schedule: @_currentSchedule.Name
    </h1>
</div>
<div class="row">
<div class="col" id="light-bulbs-col">
    <h2 style="text-align: center">
        Light Bulb Commands
    </h2>
    <RadzenPanel Text="Create light bulb command" AllowCollapse="true" Collapsed=@(_addLightBulbCollapsed)
                 Expand="@(() => {_addLightBulbCollapsed = false; _addDoorCollapsed = true; _addThermostatCollapsed = true;})" Collapse="@(() => _addLightBulbCollapsed = true)"
                 Style="margin: 0.5rem">
        <div class="col">
            <RadzenDropDown Placeholder="House" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_houses.Select(house => new {HouseId = house.Id, HouseName = house.Name}).Distinct())
                            TextProperty="HouseName" ValueProperty="HouseId" Value="_houseId"
                            Change=@(houseId => GetRooms(Guid.Parse(houseId.ToString()!))) />
            <RadzenDropDown Placeholder="Room" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_rooms.Select(room => new {RoomId = room.Id, RoomName = room.Name}).Distinct())
                            TextProperty="RoomName" ValueProperty="RoomId" Value="_roomId"
                            Change=@(roomId => GetLightBulbs(Guid.Parse(roomId.ToString()!))) />
            <RadzenDropDown Placeholder="Light bulb" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_lightBulbs.Select(lightBulb => new {LightBulbId = lightBulb.Id, LightBulbName = lightBulb.Name}).Distinct())
                            TextProperty="LightBulbName" ValueProperty="LightBulbId" Value="_newCommandLightBulbId"
                            Change=@(lightBulbId => SetNewCommandLightBulbId(Guid.Parse(lightBulbId.ToString()!))) />
            <RadzenButton Text="Add command" Style="margin: 0.5rem" id="add-light-bulb-addon" Click="AddLightBulbCommand"/>
        </div>
    </RadzenPanel>
    <RadzenPanel Text="Your light bulb commands:" Style="margin: 0.5rem">
        <ul class="list-group list-group-vertical">
                @if (_lightBulbCommands is not null)
                {
                    @foreach (var lightBulbIndex in Enumerable.Range(0, _lightBulbCommands.Count))
                    {
                        <div class="card">
                            <h3 class="card-header" style="text-align: center"> @_lightBulbCommands[lightBulbIndex].LightBulbName </h3>
                            <div class="card-body" style="margin: auto; text-align: center">
                                <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                    <button type="button" class="btn btn-dark"
                                            @onclick="@(() => SetOffColorAndPatchLightBulbCommand(_lightBulbCommands[lightBulbIndex].Id))">
                                        Off
                                    </button>
                                    <div class="col" style="text-align: center">
                                        <div class="row">
                                            <RadzenColorPicker @bind-Value="_lightColors[lightBulbIndex].RadzenColor"
                                                               ShowHSV="true" ShowRGBA="true" ShowColors="true"
                                                               Change=@(() => PatchLightBulbCommandColor(_lightBulbCommands[lightBulbIndex].Id)) />
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-light"
                                            @onclick="@(() => SetWhiteColorAndPatchLightBulbCommand(_lightBulbCommands[lightBulbIndex].Id))">
                                        On
                                    </button>
                                </div>
                                <p/>
                                <div class="btn-group" role="group" aria-label="Basic mixed styles example" style="text-align: center">
                                    <button type="button" class="btn btn-dark"
                                            @onclick="@(() => SetOffIntensityAndPatchLightBulbCommand(_lightBulbCommands[lightBulbIndex].Id))">
                                        Min
                                    </button>
        
                                    <div class="col" style="text-align: center">
                                        <div class="row">
                                            <label>
                                                Intensity: @(Math.Round((double) _lightBulbCommands[lightBulbIndex].
                                                               Intensity / byte.MaxValue * 100)) %
                                            </label>
                                        </div>
                                        <div class="row" style="margin: 0.5rem">
                                            <RadzenSlider @bind-Value="_lightBulbCommands[lightBulbIndex].Intensity" TValue="byte"
                                                          Min="byte.MinValue" Max="byte.MaxValue"/>
                                        </div>
                                        <div class="row">
                                            <button type="button" class="btn btn-info"
                                                    style="margin: 0.25rem; height: 2.5rem; width: 95%"
                                                    @onclick="@(() => PatchLightBulbCommandIntensity(_lightBulbCommands[lightBulbIndex].Id))">
                                                Press to set
                                            </button>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-light"
                                            @onclick="@(() => SetMaxIntensityAndPatchLightBulbCommand(_lightBulbCommands[lightBulbIndex].Id))">
                                        Max
                                    </button>
                                </div>
                            </div>
                            <div class="card-footer" style="text-align: center">
                                <button class="btn btn-danger" @onclick="@(() => DeleteLightBulbCommand(_lightBulbCommands[lightBulbIndex].Id))">
                                    Delete
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                }
            </ul>
    </RadzenPanel>
</div>

<div class="col" id="doors-col">
    <h2 style="text-align: center">
        Door Commands
    </h2>
    <RadzenPanel Text="Create door command" AllowCollapse="true" Collapsed=@(_addDoorCollapsed)
                 Expand="@(() => {_addLightBulbCollapsed = true; _addDoorCollapsed = false; _addThermostatCollapsed = true;})" Collapse="@(() => _addDoorCollapsed = true)"
                 Style="margin: 0.5rem">
        <div class="col">
            <RadzenDropDown Placeholder="House" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_houses.Select(house => new {HouseId = house.Id, HouseName = house.Name}).Distinct())
                            TextProperty="HouseName" ValueProperty="HouseId" Value="_houseId"
                            Change=@(houseId => GetRooms(Guid.Parse(houseId.ToString()!))) />
            <RadzenDropDown Placeholder="Room" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_rooms.Select(room => new {RoomId = room.Id, RoomName = room.Name}).Distinct())
                            TextProperty="RoomName" ValueProperty="RoomId" Value="_roomId"
                            Change=@(roomId => GetDoors(Guid.Parse(roomId.ToString()!))) />
            <RadzenDropDown Placeholder="Door" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_doors.Select(door => new {DoorId = door.Id, DoorName = door.Name}).Distinct())
                            TextProperty="DoorName" ValueProperty="DoorId" Value="_newCommandDoorId"
                            Change=@(doorId => SetNewCommandDoorId(Guid.Parse(doorId.ToString()!))) />
            <RadzenButton Text="Add command" Style="margin: 0.5rem" id="add-door-addon" Click="AddDoorCommand"/>
        </div>
    </RadzenPanel>
    <RadzenPanel Text="Your door commands:" Style="margin: 0.5rem">
        <ul class="list-group list-group-vertical">
                @if (_doorCommands is not null)
                {
                    @foreach (var doorCommand in _doorCommands)
                    {
                        <div class="card">
                            <h3 class="card-header" style="text-align: center"> @doorCommand.DoorName </h3>
                            <div class="card-body" style="margin: auto">
                                <div style="text-align: center; margin: 0.25rem">
                                    <label>Status: </label>
                                    @if (doorCommand.Locked)
                                    {
                                        <span class="oi oi-lock-locked" aria-hidden="true" style="margin: 0.25rem"></span>
                                    }
                                    else
                                    {
                                        <span class="oi oi-lock-unlocked" aria-hidden="true" style="margin: 0.25rem"></span>
                                    }
                                </div>
                                <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                                    <button type="button" class="btn btn-danger"
                                            @onclick="@(() => SetTrueLockedAndPatchDoorCommand(doorCommand.Id))">
                                        Lock
                                    </button>
                                    <button type="button" class="btn btn-success"
                                            @onclick="@(() => SetFalseLockedAndPatchDoorCommand(doorCommand.Id))">
                                        Unlock
                                    </button>
                                </div>
                            </div>
                            <div class="card-footer" style="text-align: center">
                                <button class="btn btn-danger" @onclick="@(() => DeleteDoorCommand(doorCommand.Id))"> Delete </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                }
            </ul>
    </RadzenPanel>
</div>

<div class="col" id="thermostats-col">
    <h2 style="text-align: center">
        Thermostat Commands
    </h2>
    <RadzenPanel Text="Create thermostat command" AllowCollapse="true" Collapsed=@(_addThermostatCollapsed)
                 Expand="@(() => {_addLightBulbCollapsed = true; _addDoorCollapsed = true; _addThermostatCollapsed = false;})" Collapse="@(() => _addThermostatCollapsed = true)"
                 Style="margin: 0.5rem">
        <div class="col">
            <RadzenDropDown Placeholder="House" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_houses.Select(house => new {HouseId = house.Id, HouseName = house.Name}).Distinct())
                            TextProperty="HouseName" ValueProperty="HouseId" Value="_houseId"
                            Change=@(houseId => GetRooms(Guid.Parse(houseId.ToString()!))) />
            <RadzenDropDown Placeholder="Room" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_rooms.Select(room => new {RoomId = room.Id, RoomName = room.Name}).Distinct())
                            TextProperty="RoomName" ValueProperty="RoomId" Value="_roomId"
                            Change=@(roomId => GetThermostats(Guid.Parse(roomId.ToString()!))) />
            <RadzenDropDown Placeholder="Thermostat" AllowClear="false" TValue="Guid" Style="margin: 0.5rem"
                            Data=@(_thermostats.Select(thermostat => new {ThermostatId = thermostat.Id, ThermostatName = thermostat.Name}).Distinct())
                            TextProperty="ThermostatName" ValueProperty="ThermostatId" Value="_newCommandThermostatId"
                            Change=@(doorId => SetNewCommandThermostatId(Guid.Parse(doorId.ToString()!))) />
            <RadzenButton Text="Add command" Style="margin: 0.5rem" id="add-thermostat-addon" Click="AddThermostatCommand"/>
        </div>
    </RadzenPanel>
    <RadzenPanel Text="Your thermostat commands:" Style="margin: 0.5rem">
        <ul class="list-group list-group-vertical">
            @if (_thermostatCommands is not null)
            {
                @foreach (var thermostatCommand in _thermostatCommands)
                {
                    <div class="card">
                        <h3 class="card-header" style="text-align: center"> @thermostatCommand.ThermostatName </h3>
                        <div class="card-body" style="text-align: center; margin: auto">
                            <div style="text-align: center; margin: 0.25rem">
                                <label>Temperature: @(thermostatCommand.Temperature + 7) &#8451;</label>
                            </div>
                            <div class="btn-group" role="group" aria-label="Basic mixed styles example" style="text-align: center">
                                <button type="button" class="btn btn-dark"
                                        @onclick="@(() => SetMinTemperatureAndPatchThermostatCommand(thermostatCommand.Id))">
                                    Min
                                </button>

                                <div class="col" style="text-align: center">
                                    <div class="row" style="margin: 0.5rem">
                                        <RadzenSlider @bind-Value="thermostatCommand.Temperature" TValue="decimal"
                                                      Min="0" Max="23" Step="0.5"/>
                                    </div>
                                    <div class="row">
                                        <button type="button" class="btn btn-info"
                                                style="margin: 0.25rem; height: 2.5rem; width: 95%"
                                                @onclick="@(() => PatchThermostatCommandTemperature(thermostatCommand.Id))">
                                            Press to set
                                        </button>
                                    </div>
                                </div>

                                <button type="button" class="btn btn-light"
                                        @onclick="@(() => SetMaxTemperatureAndPatchThermostatCommand(thermostatCommand.Id))">
                                    Max
                                </button>
                            </div>
                        </div>
                        <div class="card-footer" style="text-align: center">
                            <button class="btn btn-danger" @onclick="@(() => DeleteThermostatCommand(thermostatCommand.Id))">
                                Delete
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
            }
        </ul>
    </RadzenPanel>
</div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        _scheduleId = await _idService.GetScheduleId();
        await GetCurrentSchedule();
        await GetHouses();
        await GetCommands();
    }

}