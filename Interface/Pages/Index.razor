@page "/"
@using Microsoft.Extensions.Configuration
@using global::Shared.Models
@using System.Net
@inject HttpClient _http
@inject IJSRuntime _jsRuntime
@inject IAccessTokenProvider _accessTokenProvider
@inject IConfiguration _configuration
@attribute [Authorize]

<h1>Home Assistant</h1>
<h3>Probably the best Home Assitant you will ever find.</h3>
<h2>Your current subscription:</h2>
@if (_response != null)
{
    if (_notFound)
    {
        <h3>You currently have no subscription active. Consider an upgrade!</h3>
    }
    else
    {
        if (_subscriptionDetails != null)
        {
            <div class="card" style="width: 18rem;display: inline-block; margin: 10px">
                <div class="card-body" style="display: flex;
                                     flex-direction: column;
                                     align-items: center;">
                    <h5 class="card-title">@_subscriptionDetails.Name</h5>
                    <p class="card-text">@_subscriptionDetails.Description</p>
                    @foreach (KeyValuePair<string, string> checkoutDetailsPair in _subscriptionDetails.GetFields())
                    {
                        <p class="card-text" style="margin:5px">
                            @checkoutDetailsPair.Key <b>@checkoutDetailsPair.Value</b>
                        </p>
                    }
                </div>
            </div>
        }
        else
        {
            <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        }
    }
}
else
{
    <RadzenProgressBar  Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}

@code
{
    private UserSubscription _givenSubscription;
    private Subscription _subscriptionDetails;
    private HttpResponseMessage _response;
    private bool _notFound;
    
    protected override async Task OnInitializedAsync()
    {
        var token = await GetAccessTokenAsync();
        Console.WriteLine(token);
        _response = await _http.GetAsync("user_subscription");
        if (_response.IsSuccessStatusCode)
        {
            _notFound = false;
            _givenSubscription = await _http.GetFromJsonAsync<UserSubscription>("user_subscription");
            if (_givenSubscription != null) _subscriptionDetails = await _http.GetFromJsonAsync<Subscription>($"subscriptions/{_givenSubscription.SubscriptionId}");
        }
        if (_response.StatusCode == HttpStatusCode.NotFound)
        {
            _notFound = true;
        }
    }

    async Task<string> GetAccessTokenAsync()
    {
        var request = await _accessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions
        {
            Scopes = new[]
            {
                _configuration["AzureAdB2C:Scope"]
            }
        });
        var result = request.TryGetToken(out var accessToken);
        return result ? accessToken.Value : null;
    }
}